cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

find_package(PCL 1.5 REQUIRED)
find_package(MRPT REQUIRED base) 

include_directories(${CMAKE_SOURCE_DIR}/include ${PCL_INCLUDE_DIRS})
#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
rosbuild_add_library(${PROJECT_NAME} src/conversions.cpp)
rosbuild_add_library(${PROJECT_NAME} src/to_point_types.cpp)
rosbuild_add_library(${PROJECT_NAME} src/point_cloud_conversions.cpp)
target_link_libraries(${PROJECT_NAME} ${MRPT_LIBS})

rosbuild_add_gtest(${PROJECT_NAME}_test src/test/test_main.cpp)
rosbuild_add_gtest(${PROJECT_NAME}_test src/test/iterator_tests.cpp)
target_link_libraries (${PROJECT_NAME}_test  ${PROJECT_NAME} )

#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})
