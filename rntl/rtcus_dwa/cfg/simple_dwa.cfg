#!/usr/bin/env python
PACKAGE = "rtcus_dwa"
import roslib;roslib.load_manifest(PACKAGE)

#http://www.ros.org/wiki/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#Original DWA parameters
gen.add("k_clearance_danger",double_t,0,"weight of the clearance cost",1.0,0.0,100.0)
gen.add("k_clearance",double_t,0,"weight of the clearance cost",1.0,0.0,100.0)
gen.add("k_heading",double_t,0,"weight of the heading cost",1.0,0.0,100.0)
gen.add("k_velocity",double_t,0,"weight of the velocity cost",1.0,0.0,100.0)
gen.add("v_res", int_t, 0, "this marks the velocity resolution",  21, 0, 1000)
gen.add("omega_res",int_t,0,"this marks the angular resolution",21,0,1000)
gen.add("v_step", double_t, 0, "this marks the velocity resolution",  0.02, 0.0, 10.0)
gen.add("omega_step",double_t,0,"this marks the angular resolution",0.081,0.0,10.0)
gen.add("no_step",bool_t,0,"use the v_step omega_step instead v_res and omega_res",True)
gen.add("simulation_time_step",double_t,0,"the simulation time to make the state prediction. This affects mainly to the heading cost",2.0,0.001,2.0)

#safe DWA method
gen.add("auto_simulation_time_step",bool_t,0,"the simulation time to make the state prediction. If true the time step for the prediction is set to the planner control period",True)
gen.add("non_admisibility_repulsion_weight",double_t,0,"Non admisibility repulsion strategy constant.",0.0,0.00,1.0)
gen.add("secure_velocity_saturation_admisibility_threshold",double_t,0," The 100% ",0.0,0.00,1.0)
gen.add("security_area_obstacle_inflation",double_t,0,"in meters. the radius addition for the security region which will increase the clearance cost",0.7,0.01,20.0)
gen.add("max_collision_distance",double_t,0,"max collision distance affects to the normalization of the clearance factor", 500.0,0.001,1000.0)
gen.add("obstacle_inflation",double_t,0,"In meters ",0.0,0.00,2.0)
gen.add("use_clearance_lookup_table",bool_t,0,"  ",False)

size_enum = gen.enum([ gen.const("CircularTrayectoriesCircularShape", str_t, "CircularTrayectoriesCircularShape", "A"),
      gen.const("TrajectoryRolloutPolygonalShapeRobot", str_t, "TrajectoryRolloutPolygonalShapeRobot", "B"),
      gen.const("TrajectoryRolloutCircularShapeRobot", str_t, "TrajectoryRolloutCircularShapeRobot", "C")],   "Trajectory generation for clearance")
     
gen.add("clerance_trajectory_generation", str_t, 0, "CircularTrayectoriesCircularShape",  edit_method=size_enum)

#semi obsolete
gen.add("security_area_clearance_weight_obsolete",double_t,0,"the weight of the secure obstacles area in the clearance factor. The 100% means that the obstacle radius has no importance.",0.25,0.00,1.0)
gen.add("clearance_sigmoid_location",double_t,0,"",0.3,0.00,1.0)
gen.add("clearance_sigmoid_scale",double_t,0,"",0.05,0.0001,10.0)
#valid for the headding strategy

exit(gen.generate(PACKAGE, "navigation_node", "SimpleDwa"))

